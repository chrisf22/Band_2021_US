# Samples parameters for the turbine --------------------------------------
  # NB: Masden comment - if no measure of variance provided, only the mean value is used
  
# Radius  -----------------------------------------------------------------
if(!is.na(TurbineData$RotorRadiusSD[t])){
  sampledTurbine$RotorRadius <- sampleRotorRadius(iter, TurbineData$RotorRadius[t], TurbineData$RotorRadiusSD[t])
} else {
  sampledTurbine$RotorRadius <- rep(TurbineData$RotorRadius[t], iter)
}

#### BC ##### -- adding option of sampling from a prob distns alone  & adding simulated windspeed values to records =====================
# Rotor speed & Pitch -------------------------------------------------------------

    # Rotor speed
    #sampledTurbine$RotorSpeed <- sampleRotnSpeed(iter, TurbineData$RotationSpeed[t], TurbineData$RotationSpeedSD[t])
    windSpeedRating <- sampleRotnSpeed(iter, TurbineData$WindSpeed[t], TurbineData$WindSpeedSD[t])
    # get rotor speed according to diameter
    # 5.5 is the TSR; 60 is for converting radians/s to rpm
    sampledTurbine$RotorSpeed <-  (5.5*windSpeedRating*60)/(pi*2*sampledTurbine$RotorRadius[i])
    
    # Pitch
    sampledTurbine$Pitch <- samplePitch(iter, TurbineData$Pitch[t], TurbineData$PitchSD[t])
    
    sampledTurbine$Pitch = sampledTurbine$Pitch*pi/180 #### Transform Pitch from degrees to radians, needed for Collision Risk Sheet


# Hub height --------------------------------------------------------------
  if(!is.na(TurbineData$HubHeightAddSD[t])){
    sampledTurbine$HubHeight <- sampleHubHeightAdd(iter, TurbineData$HubHeightAdd[t], TurbineData$HubHeightAddSD[t])
  } else {
    sampledTurbine$HubHeight <- rep(TurbineData$HubHeightAdd[t], iter)
  }
  sampledTurbine$HubHeight <- sampledTurbine$RotorRadius + sampledTurbine$HubHeight
  

# Blade width -------------------------------------------------------------


    if(!is.na(TurbineData$BladeWidthSD[t])){
      
      sampledTurbine$BladeWidth <- sampleBladeWidth(iter, TurbineData$BladeWidth[t], TurbineData$BladeWidthSD[t])
      
    } else {
      
        sampledTurbine$BladeWidth <- rep(TurbineData$BladeWidth[t], iter)

      }
  

# Monthly estimates below here --------------------------------------------
  
  for(currentMonth in monthLabels){
    
    # separate out the current month mean and SD. Species.count is already filtered for current species
    #workingMean <- TurbineData %>% select(contains(currentMonth)) %>% select(contains('Mean'))
    workingMean <- TurbineData[t , paste(currentMonth, "OpMean", sep="")]
    #workingMean <- TurbineData[, grep(currentMonth, colnames(TurbineData))]
    #workingMean <- workingMean[, grep('Mean', colnames(workingMean))]
    
    #workingSD <- TurbineData %>% select(contains(currentMonth)) %>% select(contains('SD'))
    #workingSD <- TurbineData[, grep(currentMonth, colnames(TurbineData))]
    #workingSD <- workingMean[, grep('SD', colnames(workingMean))]
    workingSD <- TurbineData[t , paste(currentMonth, "OpSD", sep="")]
    
    #workingOp <- TurbineData %>% select(contains(currentMonth)) %>% select(-contains('SD'), -contains('Mean'))
    workingOp <- TurbineData[t , paste(currentMonth, "Op", sep="")]
    
    # if we have an SD, then we sample, otherwise just the mean
    #if(!is.na(workingSD[1,1])){
    if(!is.na(workingSD)){
      
      workingVect <- sampleOp(iter, workingMean, workingSD) 
      
      ### === BC BUG FIXING === ### workingOp needs to be converted from a data.frame otherwise it doesn't return the vector of differences (only the 1st difference)
      sampledTurbine[, grep(currentMonth, names(sampledTurbine))] <- workingOp*(100 - workingVect)
      
      # will explicitly rep mean, although not needed as filling into the DF
      ### === BC BUG FIXING === ### workingOp needs to be converted from a data.frame (see above)
    } else {sampledTurbine[, grep(currentMonth, names(sampledTurbine))] <- workingOp}*(100 - rep(workingMean, iter))
  }
